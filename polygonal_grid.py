import osmnx as ox
import folium
import webbrowser
import geopandas as gpd
import pandas as pd
import h3pandas
from shapely.geometry import Point
from analyze_data import z_normalize_data
#–ø–µ—Ä–µ–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –≤—ã–±–æ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥
from connect_bd import df_id, df_lat, df_lon, name_obj, type_obj
from connect_bd import df_cat_id, df_cat_lat, df_cat_lon, name_cat_obj, type_cat_obj, df_cat_pros, df_cat_cons
from connect_bd import df_pl_id, df_pl_lat, df_pl_lon, name_pl_obj,df_pl_pros, df_pl_cons

import h3
from shapely.geometry import Polygon

from map_create import create_maps


business = '–º–µ—Å—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'
size_poligon = 7
#—Ç–∏–ø –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –∫–∞–∫ —Å—Ñ–µ—Ä—É –±–∏–∑–Ω–µ—Å–∞
type_business = ''

# –û–ª—å—Ö–æ–Ω –∏ –µ–≥–æ –≥—Ä–∞–Ω–∏—Ü—ã
place = "–æ—Å—Ç—Ä–æ–≤ –û–ª—å—Ö–æ–Ω"
gdf = ox.geocode_to_gdf(place, which_result=1) 
# –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
m = folium.Map([gdf.centroid.y, gdf.centroid.x])

olhon_hex = gdf.h3.polyfill_resample(size_poligon)
# –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–µ–ª—å–Ω–æ—Å—Ç–∏
df_landmark_olkhon = pd.DataFrame({"id":df_id,"lat": df_lat, "lng": df_lon, "name":name_obj})

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –≥—Ä–∞–Ω–∏—Ü –û–ª—å—Ö–æ–Ω–∞
# def filter_points_within_island(df, gdf):
#     island_polygon = gdf.geometry.iloc[0]  # –ü–æ–ª–∏–≥–æ–Ω –æ—Å—Ç—Ä–æ–≤–∞ –û–ª—å—Ö–æ–Ω
#     df["geometry"] = df.apply(lambda row: Point(row["lng"], row["lat"]), axis=1)  # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
#     df_filtered = df[df["geometry"].apply(lambda point: point.within(island_polygon))]  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
#     return df_filtered.drop(columns=["geometry"])  # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π

def create_routes(m):
    file_path = "datas/qgis/routes_Baikal.geojson"
    gdf_routes = gpd.read_file(file_path)
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É
    for _, row in gdf_routes.iterrows():
        geo_json = folium.GeoJson(row['geometry'], name=f"Route {_}")
        geo_json.add_to(m)

    return m

def create_geometry(df):
    # —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Ç–æ–ª–±–µ—Ü h3_8
    df["h3_8"] = df.apply(lambda row: h3.geo_to_h3(row["lat"], row["lng"], size_poligon), axis=1)
    # —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Ç–æ–ª–±–µ—Ü object_count –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª-–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω
    df['object_count'] = df.groupby('h3_8')['name'].transform('count')
    #—Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Ç–æ–ª–±–µ—Ü –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    obj_hex = df.h3.geo_to_h3_aggregate(size_poligon)

    # –®–∞–≥ 3: –£–¥–∞–ª—è—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç—ã
    obj_hex = df[["h3_8","object_count"]].drop_duplicates()


    obj_hex["geometry"] = obj_hex["h3_8"].apply(
        lambda h3_index: Polygon(h3.h3_to_geo_boundary(h3_index, geo_json=True))
    )
    return obj_hex

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
def get_color(z_score):
    if z_score > 1.5:
        return "red"  # –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    elif z_score > 0.5:
        return "orange"  # –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
    elif z_score > -0.5:
        return "yellow"  # –ù–µ–±–æ–ª—å—à–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
    else:
        return "green"  # –ù–∏–∑–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è

# üîπ **–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π `main()`)**
def main(df, gdf):
    
    #df = filter_points_within_island(df, gdf)  # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –û–ª—å—Ö–æ–Ω–∞
    obj_hex = create_geometry(df)  # –°–æ–∑–¥–∞—ë–º –≥–µ–∫—Å–∞–≥–æ–Ω—ã —Å –ø–æ–¥—Å—á—ë—Ç–æ–º –æ–±—ä–µ–∫—Ç–æ–≤

    # **–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö**
    obj_hex["z_score"] = z_normalize_data(obj_hex["object_count"])  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤

    # **–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã**
    m = folium.Map(location=[gdf.geometry.centroid.y.mean(), gdf.geometry.centroid.x.mean()], zoom_start=size_poligon)
    #–¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ –≤–µ—Å—å –æ—Å—Ç—Ä–æ–≤ –æ–ª—å—Ö–æ–Ω
    folium.GeoJson(olhon_hex, color="green").add_to(m)
    # **–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–µ–∫—Å–∞–≥–æ–Ω–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ**
    for _, row in obj_hex.iterrows():
        folium.GeoJson(
            data=row["geometry"].__geo_interface__,
            style_function=lambda feature, z=row["z_score"]: {
                "color": get_color(z),
                "weight": 1,
                "fillOpacity": 0.5,
            },
            tooltip=f"Objects: {row['object_count']} (Z: {row['z_score']:.2f})"
        ).add_to(m)

    return m


def markers_obj(map,df):
    # –í—ã–≤–æ–¥ –º–∞—Ä–∫–µ—Ä–æ–≤ –º–µ—Å—Ç –Ω–∞ –∫–∞—Ä—Ç—É
    
    for index, rows in df.iterrows():
        if df is "df_cat_olkhon": #or df == df_pl_olkhon:
            popup_text = f"""
            <b>{rows["name"]}</b><br>
            <b>–ü–ª—é—Å—ã:</b> {rows["pros"] if pd.notna(rows["pros"]) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}<br>
            <b>–ú–∏–Ω—É—Å—ã:</b> {rows["cons"] if pd.notna(rows["cons"]) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
            """
            folium.Marker(
                location=[rows["lat"], rows["lng"]],
                tooltip="Click me!",
                popup=folium.Popup(popup_text, max_width=300),
                icon=folium.Icon(icon="place_icon.png"),
            ).add_to(map)
        else:
            folium.Marker(
                location=[rows["lat"], rows["lng"]],
                tooltip="Click me!",
                popup=folium.Popup(rows["name"], max_width=300),
                icon=folium.Icon(icon="place_icon.png"),
            ).add_to(map)
        
        #map.save("map.html")
        #webbrowser.open("map.html")
    return map

#IMPORTANT
# if __name__== '__main__':
#   markers_obj(m,df_cat_olkhon)
#   main(df_cat_olkhon)
#   webbrowser.open("map.html")

 # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ –ø–æ –±–∏–∑–Ω–µ—Å—É(–æ–±—â–µ–ø–∏—Ç, –º–µ—Å—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ —Ç–¥)
def choose_business(business): 
    if business == '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ':
        # —Å–æ–∑–¥–∞–µ—Ç—Å—è dataFrame —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ caterings
        return pd.DataFrame({"id":df_cat_id, "lat": df_cat_lat, "lng": df_cat_lon, "name":name_cat_obj, "pros":df_cat_pros, "cons":df_cat_cons})
    if business == "–º–µ—Å—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è":
        return pd.DataFrame({"id":df_pl_id, "lat": df_pl_lat, "lng": df_pl_lon, "name":name_pl_obj, "pros":df_pl_pros, "cons":df_pl_cons})


# —Å–æ–∑–¥–∞–µ—Ç—Å—è dataFrame —Å —Ç–∏–ø–∞–º–∏ –∏ –≤—ã–±–æ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –±–∏–∑–Ω–µ—Å–∞
def filter_type(gdf, type_obj, business, type_business,m):
    df = choose_business(business)
    if type_business!='' and type_obj!='':
        df_type = pd.DataFrame({"type":type_obj}) 
        filtered_df = df_type[df_type['type'].apply(lambda x: type_business in x if isinstance(x, list) else x == type_business)]
        indexes = filtered_df.index #–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        filter_df = df.loc[indexes] #–ø–æ–∏—Å–∫ –º–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–º —Ç–∏–ø—É –∏–Ω–¥–µ–∫—Å–æ–º
        
        m = main(filter_df,gdf)
        m = markers_obj(m, df_landmark_olkhon)
        m = create_routes()
        create_maps("map.html",m)
        
    else:        
        m = main(df,gdf)
        m = markers_obj(m, df_landmark_olkhon)
        m = create_routes(m)
        create_maps("map.html",m)
    
    
#print(filter_type(df_olkhon,type_obj, type_business,m))
#print(filter_type(df_pl_olkhon,gdf,type_obj,type_business,m))
filter_type(gdf,type_obj,business,type_business,m)

