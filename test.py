import geopandas as gpd
import osmnx as ox
import folium
import webbrowser


prefer_tourism = {1:"–∏—Å—Ç–æ—Ä–∏–∫–æ-–∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∏ —Å–∞–∫—Ä–∞–ª—å–Ω–æ–≥–æ —Ç—É—Ä–∏–∑–º–∞",
                  2:"–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞ —Ç—É—Ä–∏–∑–º–∞",
                  3:"—Å–µ–ª—å—Å–∫–æ–≥–æ, –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç—É—Ä–∏–∑–º–∞",
                  4:"–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π, –ø–ª—è–∂–Ω–æ–≥–æ –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—É—Ä–∏–∑–º–∞",
                  5:"–Ω–∞—É—á–Ω–æ–≥–æ –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—É—Ä–∏–∑–º–∞",
                  6:"–ø–µ—à–µ–≥–æ —Ç—É—Ä–∏–∑–º–∞ –ø–æ –ª–µ—Å–Ω—ã–º —Ç—Ä–æ–ø–∞–º",
                  7:"–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—É—Ä–∏–∑–º–∞"}
# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ—è
gdfVec = gpd.read_file("datas/qgis/zone_landshaft_Olkhon.geojson")
gdfVec = gdfVec.to_crs(epsg=4326)
# –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
print(gdfVec.head())

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Å—Ç—Ä–æ–≤–∞ –û–ª—å—Ö–æ–Ω —á–µ—Ä–µ–∑ OSMnx
place = "–æ—Å—Ç—Ä–æ–≤ –û–ª—å—Ö–æ–Ω"
gdf = ox.geocode_to_gdf(place, which_result=1)

# –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã (–±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É)
m = folium.Map([gdf.centroid.y, gdf.centroid.x], zoom_start=10)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
color_map = {1: "red", 2: "yellow", 3: "green"}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
for _, row in gdfVec.iterrows():
    zone_number = row["number"]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–æ–Ω—ã
    tooltip_text = prefer_tourism.get(zone_number, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–æ–Ω–∞")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è tooltip
    
    color = color_map.get(row["degree"], "gray")  # –¶–≤–µ—Ç –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏

    folium.GeoJson(
        row["geometry"].__geo_interface__,
        style_function=lambda feature, color=color: {
            "fillColor": color,
            "color": "black",
            "weight": 1,
            "fillOpacity": 0.5
        },
        tooltip=tooltip_text  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    ).add_to(m)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã
# m.save("mapVector.html")
# webbrowser.open("mapVector.html")

def create_zone_map():
    m = folium.Map([gdf.geometry.centroid.y.iloc[0], gdf.geometry.centroid.x.iloc[0]], zoom_start=10)

    for _, row in gdfVec.iterrows():
        zone_number = row["number"]
        zone_name = row["name"]
        color = color_map.get(row["degree"], "gray")
    
        folium.GeoJson(
            row["geometry"].__geo_interface__,
            style_function=lambda feature, color=color: {
                "fillColor": color,
                "color": "black",
                "weight": 1,
                "fillOpacity": 0.5
            },
            tooltip=zone_name
        ).add_to(m)

    m.save("zone_map.html")
    webbrowser.open("zone_map.html")

# –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã —Å –∑–æ–Ω–∞–º–∏
create_zone_map()


# –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∏ –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª–∏–≥–æ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏—Å–º–æ—Å—Ç–∏ —Å –∏—Ö –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ–º
import osmnx as ox
import folium
import webbrowser
import geopandas as gpd
import pandas as pd
import h3
import numpy as np
from shapely.geometry import Polygon
import osmnx as ox
import folium
import webbrowser
import geopandas as gpd
import pandas as pd
import h3pandas
from shapely.geometry import Point

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–æ–Ω –æ—Å—Ç—Ä–æ–≤–∞ –û–ª—å—Ö–æ–Ω
gdf_zones = gpd.read_file("datas/qgis/zone_landshaft_Olkhon.geojson").to_crs(epsg=4326)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –æ—Å—Ç—Ä–æ–≤–∞ –û–ª—å—Ö–æ–Ω
place = "–æ—Å—Ç—Ä–æ–≤ –û–ª—å—Ö–æ–Ω"
gdf = ox.geocode_to_gdf(place, which_result=1)

# –¶–≤–µ—Ç–∞ –∑–æ–Ω (–ø–æ degree)
color_map = {1: "red", 2: "yellow", 3: "green", 4: "blue", 5: "purple", 6: "orange", 7: "pink"}

# üîπ **–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏**
olhon_hex = gdf.h3.polyfill_resample(8)
m = folium.Map(location=[gdf.geometry.centroid.y.mean(), gdf.geometry.centroid.x.mean()], zoom_start=10)

# üîπ **–ó–∞–∫—Ä–∞—Å–∫–∞ –≥–µ–∫—Å–∞–≥–æ–Ω–æ–≤ –ø–æ –∑–æ–Ω–∞–º**
for _, row in olhon_hex.iterrows():
    hex_geometry = row["geometry"]  # –ì—Ä–∞–Ω–∏—Ü–∞ –≥–µ–∫—Å–∞–≥–æ–Ω–∞
    hex_color = "gray"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä—ã–π
    zone_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–æ–Ω–∞"
    zone_number = ""
    tooltip_text = ""
    for _, zone in gdf_zones.iterrows():
        if hex_geometry.intersects(zone["geometry"]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∑–æ–Ω–æ–π
            hex_color = color_map.get(zone["degree"], "gray")
            zone_name = zone["name"]
            zone_number = zone["number"]
            tooltip_text = prefer_tourism.get(zone_number, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–æ–Ω–∞")
            break  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–æ–Ω—É

    folium.GeoJson(
        data=hex_geometry.__geo_interface__,
        style_function=lambda feature, color=hex_color: {
            "fillColor": color,
            "color": "black",
            "weight": 1,
            "fillOpacity": 0.5
        },
        tooltip=tooltip_text
    ).add_to(m)

# üîπ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã**
m.save("map/hexagonal_zones.html")
webbrowser.open("map/hexagonal_zones.html")
